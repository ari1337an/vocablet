"use client";
import React, { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/app/_components/ui/button";
import { Progress } from "@/app/_components/ui/progress";
import useAppStore from "../../_store/useAppStore";
import { Separator } from "@/app/_components/ui/separator";
import { AddBucketSheet } from "./add-bucket-sheet";
import { AddWordsSheet } from "./add-words-sheet";
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { Input } from "@/app/_components/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/app/_components/ui/table";
import { CaretSortIcon, StarIcon } from "@radix-ui/react-icons";
import DeleteBucketButtonWithConfirmationDialog from "./bucket-delete-confirmation-dialog";

interface Bucket {
  id: string;
  title: string;
}

export default function Buckets({
  autoGeneratedBucketId,
}: {
  autoGeneratedBucketId: string | null | undefined;
}) {
  const {} = useAppStore();
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const [initialFetchComplete, setInitialFetchComplete] = useState(false);
  const [progress, setProgress] = useState(33);
  const [buckets, setBuckets] = useState<Bucket[]>([]);
  const [sorting, setSorting] = useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = useState({});
  const router = useRouter();

  useEffect(() => {
    const fetchBuckets = async () => {
      setProgress(66);
      const response = await fetch("/api/buckets");
      const data = await response.json();
      if (data.success) {
        setInitialFetchComplete(true);
        setProgress(100);
        setBuckets(data.buckets);
      } else {
        console.log("Error fetching buckets:", data.error);
      }
    };

    fetchBuckets();
  }, []);

  const handleAddBucket = (newBucket: Bucket) => {
    setBuckets((prevBuckets) => [...prevBuckets, newBucket]);
  };

  const columns: ColumnDef<Bucket>[] = [
    {
      accessorKey: "title",
      header: ({ column }) => (
        <Button
          variant="ghost"
          onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
        >
          Title
          <CaretSortIcon className="ml-2 h-4 w-4" />
        </Button>
      ),
      cell: ({ row }) => {
        const bucket = row.original;
        return (
          <div className="flex items-center">
            {bucket.title}
            {bucket.id === autoGeneratedBucketId && (
              <StarIcon className="ml-2 h-4 w-4 text-yellow-500" />
            )}
          </div>
        );
      },
    },
    {
      id: "actions",
      cell: ({ row }) => {
        const bucket = row.original;

        return (
          <div className="flex space-x-2">
            <Button
              variant="ghost"
              onClick={() => handleBucketClick(bucket.id)}
            >
              View Words
            </Button>
            <DeleteBucketButtonWithConfirmationDialog
              bucket={bucket}
              setBuckets={setBuckets}
            />
          </div>
        );
      },
    },
  ];

  const table = useReactTable({
    data: buckets,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });

  function handleBucketClick(id: string): void {
    router.push(`/flashcards/${id}`);
  }

  if (!initialFetchComplete) {
    return (
      <main className="min-h-screen h-full flex flex-col items-center justify-center gap-y-5">
        <div>Loading Bucket list...</div>
        <Progress value={progress} className="w-[50%] lg:w-[20%]" />
      </main>
    );
  }

  const autoGeneratedBucket = buckets.find(
    (bucket) => bucket.id === autoGeneratedBucketId
  );

  const otherBuckets = buckets.filter(
    (bucket) => bucket.id !== autoGeneratedBucketId
  );

  return (
    <div className="w-full h-full flex flex-col gap-y-5 px-8 lg:px-36 items-center justify-normal">
      <div className="w-full flex flex-col">
        <div className="w-full flex flex-row justify-between items-center">
          <h1 className="text-2xl font-bold mb-4">Buckets List</h1>
          <div className="p-4 items-center justify-center">
            <AddWordsSheet currentBucketId={null} onAddVocab={() => {}} />
            <AddBucketSheet onAddBucket={handleAddBucket} />
          </div>
        </div>
        <Separator className="bg-white" />
      </div>
      <div className="w-full flex items-center py-4">
        <Input
          placeholder="Filter buckets..."
          value={(table.getColumn("title")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("title")?.setFilterValue(event.target.value)
          }
          className="max-w-sm"
        />
      </div>
      {autoGeneratedBucket && (
        <div className="w-full p-4 mb-4 border rounded-md bg-orange-500 flex items-center">
          <StarIcon className="h-5 w-5  mr-2" />
          <div className="flex-1">
            <strong>Auto-Generated Bucket: </strong>
            {autoGeneratedBucket.title}
          </div>
          <Button
            variant="ghost"
            onClick={() => handleBucketClick(autoGeneratedBucket.id)}
          >
            View Words
          </Button>
          {/* <DeleteBucketButtonWithConfirmationDialog
            bucket={autoGeneratedBucket}
            setBuckets={setBuckets}
          /> */}
        </div>
      )}
      <div className="w-full rounded-md border">
        <Table className="w-full">
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  );
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {otherBuckets.length ? (
              otherBuckets.map((bucket) => (
                <TableRow key={bucket.id} className="border-b border-gray-600">
                  {table
                    .getRowModel()
                    .rows.find((row) => row.original.id === bucket.id)
                    ?.getVisibleCells()
                    .map((cell) => (
                      <TableCell key={cell.id}>
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </TableCell>
                    ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="w-full flex items-center justify-end space-x-2 py-4">
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Previous
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Next
          </Button>
        </div>
      </div>
    </div>
  );
}
