generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  autoGeneratedBucketId String?
  accounts              Account[]
  sessions              Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Subscription Subscription[]
  Conversation Conversation[]
  Turn         Turn[]

  vocabularyBuckets VocabularyBucket[] // Vocabulary Buckets
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum PlanType {
  ONETIME
  MONTHLY
}

enum PlanSlug {
  STARTER
  PRO
  ADVANCED
  REFILL
}

model Plan {
  slug          PlanSlug              @id @unique @default(STARTER) // starter, pro, advanced, refill [CUSTOMER FACING]
  name          String? // for internal use only, not customer facing
  description   String? // for internal use only, not customer facing
  price         Int? // for internal use only, not customer facing
  itemType      SubscriptionUsageType // IMPORTANT [CUSTOMER FACING]
  itemUnit      Int // IMPORTANT [CUSTOMER FACING]
  type          PlanType              @default(MONTHLY) // IMPORTANT [STRIPE BACKEND FACING]
  stripePriceId String // IMPORTANT [STRIPE BACKEND FACING]
}

enum SubscriptionUsageType {
  AI_TOKEN
  // ... add more types here
}

model Subscription {
  id                        String                @id @default(cuid())
  stripeCustomerId          String?               @unique // null for one-time purchases
  userId                    String
  stripeSubscriptionId      String?               @unique // null for one-time purchases
  stripePriceId             String
  stripeSubscriptionActive  Boolean               @default(true)
  stripeSubscriptionExpires DateTime?
  stripeInvoiceFailed       Boolean               @default(false)
  maxUsageUnit              Int // Important, this is the total usage unit for the subscription
  usageType                 SubscriptionUsageType @default(AI_TOKEN)
  usedUnit                  Int                   @default(0) // keep this in integer, round up to the nearest integer for float values
  subscribedAt              DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Turn Turn[]
}

model Turn {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  message        String
  reply          String
  totalTokens    Int
  createdAt      DateTime @default(now())

  conversation         Conversation           @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  VocabAgentSuggestion VocabAgentSuggestion[]
}

model VocabAgentSuggestion {
  id           String @id @default(cuid())
  turnId       String
  totalTokens  Int
  words        Json
  phrases      Json
  enhancedText String

  createdAt DateTime @default(now())

  Turn Turn @relation(fields: [turnId], references: [id], onDelete: Cascade)
}

model VocabularyBucket {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Vocabulary Vocabulary[]
}

model Vocabulary {
  id              String   @id @default(cuid())
  bucketId        String
  wordOrPhrase    String
  meaning         String
  exampleSentence String
  createdAt       DateTime @default(now())

  bucket VocabularyBucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)
}
