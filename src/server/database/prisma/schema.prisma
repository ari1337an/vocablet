generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  autoGeneratedBucketId String?
  accounts              Account[]
  sessions              Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Conversation Conversation[]
  Turn         Turn[]
  Roleplay     Roleplay[]

  vocabularyBuckets VocabularyBucket[]
  Subscription      Subscription?
  Entitlements      Entitlement[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Subscription {
  stripeCustomerId          String    @id
  userId                    String    @unique
  stripeSubscriptionId      String    @unique
  stripePriceId             String
  stripeSubscriptionActive  Boolean   @default(true)
  stripeSubscriptionExpires DateTime?
  stripeInvoiceFailed       Boolean   @default(false)
  messageCurrencyMax           Int       @default(0) 
  messageUsed               Int       @default(0)             
  subscribedAt              DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Entitlement {
  id        String   @id @default(uuid())
  userId    String
  feature   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Conversation {
  id         String   @id @default(cuid())
  title      String
  userId     String
  roleplayId String?
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Turn     Turn[]
  Roleplay Roleplay? @relation(fields: [roleplayId], references: [id])
}

model Turn {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  message        String
  reply          String
  totalTokens    Int
  createdAt      DateTime @default(now())

  conversation         Conversation           @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  VocabAgentSuggestion VocabAgentSuggestion[]
}

model VocabAgentSuggestion {
  id           String   @id @default(cuid())
  turnId       String
  totalTokens  Int
  words        String[]
  enhancedText String

  createdAt DateTime @default(now())

  Turn Turn @relation(fields: [turnId], references: [id], onDelete: Cascade)
}

model VocabularyBucket {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Vocabulary Vocabulary[]
}

model Vocabulary {
  id           String   @id @default(cuid())
  bucketId     String
  wordOrPhrase String
  createdAt    DateTime @default(now())

  bucket VocabularyBucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)
}

model Roleplay {
  id                  String   @id @default(cuid())
  userId              String
  title               String
  assistantRole       String
  userRole            String
  conversationTone    String
  conversationContext String
  createdAt           DateTime @default(now())

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
}
